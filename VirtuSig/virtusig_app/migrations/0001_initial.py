# Generated by Django 3.2.13 on 2022-11-15 13:05

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Envelop_Display',
            fields=[
                ('email_id', models.EmailField(max_length=254, primary_key=True, serialize=False)),
                ('sender_password', models.CharField(max_length=255)),
                ('recipient_id', models.CharField(max_length=255)),
                ('subjects', models.CharField(max_length=255)),
                ('cc', models.CharField(max_length=255)),
                ('body', models.CharField(max_length=255)),
                ('attachment', models.FilePathField()),
            ],
            options={
                'db_table': 'envelop_display',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VirtusigAppLoginuser',
            fields=[
                ('email_id', models.CharField(max_length=254, primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'virtusig_app_loginuser',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VirtusigLogin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_id', models.EmailField(max_length=255)),
                ('password', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_name', models.CharField(max_length=255)),
                ('user_phone', models.CharField(max_length=255, unique=True)),
                ('user_image', models.CharField(max_length=255)),
                ('status', models.CharField(max_length=255)),
                ('is_verified', models.CharField(max_length=255)),
                ('reg_date', models.DateTimeField(auto_now_add=True)),
                ('user_email', models.CharField(max_length=255, unique=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('user_password', models.CharField(max_length=255)),
                ('gender', models.CharField(blank=True, max_length=1, null=True)),
                ('first_login', models.BooleanField(blank=True, default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
        ),
    ]
